{"version":3,"file":"static/js/253.8af95b07.chunk.js","mappings":"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","sources":["constants/baseUrl.js","api/Api.js","pages/ListBranches/ListBranches.tsx"],"sourcesContent":["export const constantsApi = {\r\n    BASE_URL: 'https://api.novaposhta.ua/v2.0/json',\r\n    KEY: '6de779f238efba7722245783c629122b',\r\n};","import axios from 'axios';\r\nimport { constantsApi } from '../constants/baseUrl';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst api = axios.create({\r\n    baseURL: constantsApi.BASE_URL,\r\n});\r\n\r\n\r\n// запит за ТТН\r\nexport async function getInfo(trackingNumber) {\r\n    try {\r\n        const response = await api.post(\r\n            'TrackingDocument/getStatusDocuments',\r\n            {\r\n                apiKey: constantsApi.KEY,\r\n                modelName: 'TrackingDocument',\r\n                calledMethod: 'getStatusDocuments',\r\n                methodProperties: {\r\n                    Documents: [\r\n                        {\r\n                            DocumentNumber: trackingNumber,\r\n                        },\r\n                    ],\r\n                }\r\n            }\r\n        );\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error('Помилка запиту:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n//запит за відділенями у місті\r\nexport async function getWarehousesInCity(cityName) {\r\n    try {\r\n        const response = await api.post(\r\n            'Address/getWarehouses',\r\n            {\r\n                apiKey: constantsApi.KEY,\r\n                modelName: 'Address',\r\n                calledMethod: 'getWarehouses',\r\n                methodProperties: {\r\n                    CityName: cityName,\r\n                },\r\n            }\r\n        );\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error('Помилка запиту:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getWarehousesInCityPage(cityName, page, itemsPerPage) {\r\n    try {\r\n        const response = await api.post(\r\n            'Address/getWarehouses',\r\n            {\r\n                apiKey: constantsApi.KEY,\r\n                modelName: 'Address',\r\n                calledMethod: 'getWarehouses',\r\n                methodProperties: {\r\n                    CityName: cityName,\r\n                    Limit: itemsPerPage,\r\n                    Page: page,\r\n                },\r\n            }\r\n        );\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error('Помилка запиту:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  InputAdornment,\r\n  Pagination,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport \"./ListBranches.css\";\r\nimport { getWarehousesInCity, getWarehousesInCityPage } from \"../../api/Api\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { SetStateAction, useEffect, useState } from \"react\";\r\nimport { Container } from \"@mui/system\";\r\nimport { toast } from \"react-toastify\";\r\n\r\ninterface WorkingHours {\r\n  [day: string]: string;\r\n}\r\ninterface ResultCard {\r\n  CityDescription: string;\r\n  Description: string;\r\n  SiteKey: string;\r\n  Schedule: WorkingHours;\r\n  Phone: string;\r\n  PlaceMaxWeightAllowed: string;\r\n}\r\n\r\nconst ListBranches = () => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageTotalItems, setPageTotalItems] = useState(200);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [result, setResult] = useState<ResultCard[]>([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  const isMob = useMediaQuery(\"(max-width: 524px)\");\r\n\r\n  const itemsPerPage = isMob ? 9 : 21;\r\n\r\n  const handlePaginationChange = (event: any, page: SetStateAction<number>) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  //запрос по городу и по страничный\r\n  useEffect(() => {\r\n    if (inputValue !== \"\") {\r\n      const fetchData = async () => {\r\n        try {\r\n          const resultSender = await getWarehousesInCityPage(\r\n            inputValue,\r\n            currentPage,\r\n            itemsPerPage\r\n          );\r\n          setResult(resultSender.data);\r\n        } catch (error) {\r\n          toast.error(\"Помилка запиту\");\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPage]);\r\n\r\n  //запрос по городу\r\n  const handleButtonClick = async () => {\r\n    const resultSender = await getWarehousesInCity(inputValue);\r\n    if (resultSender.data.length > 0) {\r\n      setResult(resultSender.data.slice(0, isMob ? 9 : 21));\r\n      setPageTotalItems(resultSender.data.length);\r\n      toast.success(`Знайденно ${resultSender.data.length} відділень`);\r\n    } else {\r\n      toast.error(\"Немає такого міста\");\r\n    }\r\n  };\r\n\r\n  //инпут + валидация\r\n  const validInput = /^[а-яА-ЯІіЇїЄєҐґ]+$/;\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = event.target.value.trim();\r\n    if (!validInput.test(newValue)) {\r\n      setError(true);\r\n    } else {\r\n      setError(false);\r\n      setInputValue(newValue);\r\n    }\r\n    setInputValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component=\"section\"\r\n      sx={{\r\n        backgroundColor: \"red\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <Container\r\n        fixed\r\n        sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\r\n      >\r\n        <Box component=\"div\" sx={{ minHeight: \"105px\" }}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label=\"Введіть місто\"\r\n            variant=\"standard\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            error={error}\r\n            helperText={error ? \"Тільки літери\" : \"\"}\r\n            sx={{ width: \"280px\", margin: \"15px 0\" }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      handleButtonClick();\r\n                    }}\r\n                  >\r\n                    <Search />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Box>\r\n        <div>\r\n          <ul className=\"listInfoCity\">\r\n            {result.length !== 0 ? (\r\n              result.map((resultCard) => {\r\n                return (\r\n                  <li className=\"itemInfoCity\" key={resultCard.SiteKey}>\r\n                    <Card\r\n                      sx={{\r\n                        minWidth: 275,\r\n                        minHeight: \"360px\",\r\n                      }}\r\n                    >\r\n                      <CardContent>\r\n                        <Typography variant=\"h6\" component=\"div\">\r\n                          {resultCard.CityDescription}\r\n                        </Typography>\r\n                        <Typography\r\n                          sx={{ fontSize: 14 }}\r\n                          color=\"text.secondary\"\r\n                          gutterBottom\r\n                        >\r\n                          {resultCard.Description}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"div\">\r\n                          Час роботи :<br />\r\n                          <span className=\"span__Time--Work\">\r\n                            Пн: {resultCard.Schedule.Monday}\r\n                          </span>{\" \"}\r\n                          <span className=\"span__Time--Work\">\r\n                            Вт: {resultCard.Schedule.Thursday}\r\n                          </span>\r\n                          <br />\r\n                          <span className=\"span__Time--Work\">\r\n                            Ср: {resultCard.Schedule.Wednesday}\r\n                          </span>{\" \"}\r\n                          <span className=\"span__Time--Work\">\r\n                            Чт: {resultCard.Schedule.Thursday}\r\n                          </span>\r\n                          <br />\r\n                          <span className=\"span__Time--Work\">\r\n                            Пт: {resultCard.Schedule.Friday}\r\n                          </span>\r\n                          <br />\r\n                          <span className=\"span__Time--Work\">\r\n                            Сб: {resultCard.Schedule.Sunday}\r\n                          </span>{\" \"}\r\n                          <span className=\"span__Time--Work\">\r\n                            Нд: {resultCard.Schedule.Saturday}\r\n                          </span>\r\n                        </Typography>\r\n                        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n                          Телефон : {resultCard.Phone}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          Вага: {resultCard.PlaceMaxWeightAllowed} кг.\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </li>\r\n                );\r\n              })\r\n            ) : (\r\n              <>\r\n                {Array.from({ length: 9 }).map((_, index) => (\r\n                  <li className=\"itemInfoCity\" key={`empty-${index}`}>\r\n                    <Card\r\n                      sx={{\r\n                        minWidth: 275,\r\n                        minHeight: \"320px\",\r\n                      }}\r\n                    >\r\n                      <CardContent></CardContent>\r\n                    </Card>\r\n                  </li>\r\n                ))}\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n        <Stack spacing={2} sx={{ padding: \"25px 0\" }}>\r\n          <Pagination\r\n            count={Math.ceil(pageTotalItems / itemsPerPage)}\r\n            onChange={handlePaginationChange}\r\n            page={currentPage}\r\n            size={isMob ? \"small\" : \"medium\"}\r\n          />\r\n        </Stack>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ListBranches;\r\n"],"names":["constantsApi","BASE_URL","KEY","api","axios","create","baseURL","getInfo","_x","_getInfo","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","trackingNumber","response","wrap","_context","prev","next","post","apiKey","modelName","calledMethod","methodProperties","Documents","DocumentNumber","sent","abrupt","data","t0","toast","error","stop","getWarehousesInCity","_x2","_getWarehousesInCity","_callee2","cityName","_context2","CityName","getWarehousesInCityPage","_x3","_x4","_x5","_getWarehousesInCityPage","_callee3","page","itemsPerPage","_context3","Limit","Page","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","pageTotalItems","setPageTotalItems","_useState5","_useState6","inputValue","setInputValue","_useState7","_useState8","result","setResult","_useState9","_useState10","setError","isMob","useMediaQuery","useEffect","fetchData","_ref","resultSender","handleButtonClick","_ref2","length","slice","success","concat","validInput","_jsx","Box","component","sx","backgroundColor","height","children","_jsxs","Container","fixed","display","flexDirection","alignItems","minHeight","TextField","id","label","variant","value","onChange","event","newValue","target","trim","test","helperText","width","margin","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Search","className","map","resultCard","Card","minWidth","CardContent","Typography","CityDescription","fontSize","color","gutterBottom","Description","Schedule","Monday","Thursday","Wednesday","Friday","Sunday","Saturday","mb","Phone","PlaceMaxWeightAllowed","SiteKey","_Fragment","Array","from","_","index","Stack","spacing","padding","Pagination","count","Math","ceil","size"],"sourceRoot":""}